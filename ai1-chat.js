/**
 * AI Chat Functionality - Version 2
 * ‚ö†Ô∏è ÂÆâÂÖ®Ë≠¶ÂëäÔºöËøôÊòØÊºîÁ§∫‰ª£Á†ÅÔºå‰∏çÂ∫îÂú®Áîü‰∫ßÁéØÂ¢É‰∏≠‰ΩøÁî®ÔºÅ
 * Âú®ÁúüÂÆûÈ°πÁõÆ‰∏≠ÔºåAPI keyÂ∫îËØ•‰øùÂ≠òÂú®ÂêéÁ´ØÊúçÂä°Âô®‰∏≠„ÄÇ
 */

class AI1Chat {
    constructor() {
        this.apiKey = '';
        this.messages = [];
        this.isTyping = false;
        this.config = this.loadConfig();

        this.initializeElements();
        this.bindEvents();
        this.loadApiKey();
        
        // Á°Æ‰øùÊØèÊ¨°È°µÈù¢Âà∑Êñ∞ÈÉΩÊòØÂπ≤ÂáÄÁöÑÁä∂ÊÄÅ
        this.clearSessionData();
        
        this.initializeUI();
        
        // Á°Æ‰øùÂú®Á∫øÈÖçÁΩÆÁ´ãÂç≥ÁîüÊïà
        this.ensureOnlineConfigActive();
    }

    // Á°Æ‰øùÂú®Á∫øÈÖçÁΩÆÁ´ãÂç≥ÁîüÊïà
    ensureOnlineConfigActive() {
        console.log('üîß Ensuring online config is active for AI1...');
        
        // Á≠âÂæÖÂú®Á∫øÈÖçÁΩÆÂä†ËΩΩÂÆåÊàê
        const checkOnlineConfig = () => {
            if (window.onlineGlobalConfig && window.onlineGlobalConfig.currentConfig) {
                const onlineConfig = window.onlineGlobalConfig.getAI2Config();
                console.log('üéØ Forcing online config application for AI1 (using AI2 config):', onlineConfig);
                
                // Âº∫Âà∂Â∫îÁî®Âú®Á∫øÈÖçÁΩÆÔºå‰ΩÜÁ°Æ‰øù‰ΩøÁî®Ê≠£Á°ÆÁöÑÈÖçÁΩÆ
                if (onlineConfig.systemPrompt) {
                    // Ê£ÄÊü•ÊòØÂê¶ÊòØLucyÁöÑÈÖçÁΩÆÔºåÂ¶ÇÊûúÊòØÂàô‰ΩøÁî®ÈªòËÆ§ÁöÑTomÈÖçÁΩÆ
                    const systemPrompt = onlineConfig.systemPrompt;
                    if (systemPrompt.includes('Lucy') || systemPrompt.includes('magician') || systemPrompt.includes('Ruoyu Wen') || systemPrompt.includes('"role": "Lucy"')) {
                        console.log('‚ö†Ô∏è Detected Lucy/Ruoyu config, using default Tom config instead');
                        this.config.systemPrompt = window.AI1_CONFIG?.systemPrompt || this.config.systemPrompt;
                    } else if (systemPrompt.includes('Jerry')) {
                        // ‰ΩøÁî®JerryÈÖçÁΩÆ
                        console.log('‚úÖ Using Jerry config from online admin (AI2)');
                        this.config.systemPrompt = onlineConfig.systemPrompt;
                    } else if (systemPrompt.includes('Tom')) {
                        // ‰ΩøÁî®TomÈÖçÁΩÆ
                        console.log('‚úÖ Using Tom config from online admin (AI2)');
                        this.config.systemPrompt = onlineConfig.systemPrompt;
                    } else {
                        // Ê£ÄÊü•ÊòØÂê¶ÊòØÊúâÊïàÁöÑÈÖçÁΩÆÔºà‰∏çÊòØLucyÈÖçÁΩÆÔºâ
                        console.log('‚úÖ Using valid config from online admin (AI2)');
                        this.config.systemPrompt = onlineConfig.systemPrompt;
                    }
                    console.log('‚úÖ AI1 System prompt forcefully updated to:', this.config.systemPrompt);
                }
                if (onlineConfig.model) {
                    this.config.model = onlineConfig.model;
                }
                if (onlineConfig.apiParams) {
                    this.config.apiParams = { ...this.config.apiParams, ...onlineConfig.apiParams };
                }
                
                console.log('üöÄ Final AI1 config after force update:', this.config);
            } else if (window.onlineGlobalConfig) {
                // Â¶ÇÊûúonlineGlobalConfigÂ≠òÂú®‰ΩÜÊ≤°ÊúâcurrentConfigÔºåÂ∞ùËØïÂä†ËΩΩ
                console.log('üîÑ Online global config exists but no current config, trying to load...');
                window.onlineGlobalConfig.loadConfig().then(() => {
                    // ÈáçÊñ∞Ê£ÄÊü•ÈÖçÁΩÆ
                    setTimeout(checkOnlineConfig, 100);
                });
            } else {
                console.log('‚è≥ Online config not ready for AI1, retrying in 1 second...');
                setTimeout(checkOnlineConfig, 1000);
            }
        };
        
        // Á´ãÂç≥Ê£ÄÊü•ÔºåÂ¶ÇÊûú‰∏çÂèØÁî®ÂàôÊØèÁßíÈáçËØï
        checkOnlineConfig();
    }

    loadConfig() {
        // Load default config first
        let config = JSON.parse(JSON.stringify(window.AI1_CONFIG || {}));
        console.log('üìã Default AI1 config loaded:', config);
        
        try {
            // PRIORITY 1: Check for ONLINE GLOBAL configuration
            if (window.onlineGlobalConfig && window.onlineGlobalConfig.currentConfig) {
                const onlineConfig = window.onlineGlobalConfig.getAI2Config();
                console.log('‚òÅÔ∏è Loading ONLINE GLOBAL AI1 config (using AI2 config):', onlineConfig);
                
                if (onlineConfig.model) config.model = onlineConfig.model;
                if (onlineConfig.systemPrompt) {
                    // Ê£ÄÊü•ÊòØÂê¶ÊòØLucyÁöÑÈÖçÁΩÆÔºåÂ¶ÇÊûúÊòØÂàô‰ΩøÁî®ÈªòËÆ§ÁöÑTomÈÖçÁΩÆ
                    const systemPrompt = onlineConfig.systemPrompt;
                    if (systemPrompt.includes('Lucy') || systemPrompt.includes('magician') || systemPrompt.includes('Ruoyu Wen') || systemPrompt.includes('"role": "Lucy"')) {
                        console.log('‚ö†Ô∏è Detected Lucy/Ruoyu config in online config, using default Tom config instead');
                        config.systemPrompt = window.AI1_CONFIG?.systemPrompt || config.systemPrompt;
                    } else if (systemPrompt.includes('Jerry')) {
                        // ‰ΩøÁî®JerryÈÖçÁΩÆ
                        console.log('‚úÖ Using Jerry config from online admin (AI2)');
                        config.systemPrompt = onlineConfig.systemPrompt;
                    } else if (systemPrompt.includes('Tom')) {
                        // ‰ΩøÁî®TomÈÖçÁΩÆ
                        console.log('‚úÖ Using Tom config from online admin');
                        config.systemPrompt = onlineConfig.systemPrompt;
                    } else {
                        // Ê£ÄÊü•ÊòØÂê¶ÊòØÊúâÊïàÁöÑÈÖçÁΩÆÔºà‰∏çÊòØLucyÈÖçÁΩÆÔºâ
                        console.log('‚úÖ Using valid config from online admin');
                        config.systemPrompt = onlineConfig.systemPrompt;
                    }
                }
                if (onlineConfig.apiParams) {
                    config.apiParams = { ...config.apiParams, ...onlineConfig.apiParams };
                }
                
                // Á°Æ‰øùuiÈÖçÁΩÆ‰∏çË¢´Ë¶ÜÁõñ
                if (!config.ui) {
                    config.ui = window.AI1_CONFIG?.ui || {};
                }
                
                console.log('‚úÖ AI1 config updated with ONLINE GLOBAL settings (AI2 config):', config);
                console.log('üïê Online config version:', window.onlineGlobalConfig.configVersion);
            } else if (window.onlineGlobalConfig) {
                // Â¶ÇÊûúonlineGlobalConfigÂ≠òÂú®‰ΩÜÊ≤°ÊúâcurrentConfigÔºåÂ∞ùËØïÂä†ËΩΩ
                console.log('üîÑ Online global config exists but no current config, trying to load...');
                window.onlineGlobalConfig.loadConfig().then(() => {
                    // ÈáçÊñ∞Âä†ËΩΩÈÖçÁΩÆ
                    this.refreshConfig();
                });
            }
            // PRIORITY 2: Check for FILE-BASED GLOBAL configuration from global-config.js
            else if (window.GLOBAL_AI1_CONFIG) {
                const globalConfig = window.GLOBAL_AI1_CONFIG;
                console.log('üåç Loading FILE-BASED GLOBAL AI1 config:', globalConfig);
                
                if (globalConfig.model) config.model = globalConfig.model;
                if (globalConfig.systemPrompt) {
                    // Ê£ÄÊü•ÊòØÂê¶ÊòØLucyÁöÑÈÖçÁΩÆÔºåÂ¶ÇÊûúÊòØÂàô‰ΩøÁî®ÈªòËÆ§ÁöÑTomÈÖçÁΩÆ
                    const systemPrompt = globalConfig.systemPrompt;
                    if (systemPrompt.includes('Lucy') || systemPrompt.includes('magician') || systemPrompt.includes('Ruoyu Wen') || systemPrompt.includes('"role": "Lucy"')) {
                        console.log('‚ö†Ô∏è Detected Lucy/Ruoyu config in global config, using default Tom config instead');
                        config.systemPrompt = window.AI1_CONFIG?.systemPrompt || config.systemPrompt;
                    } else if (systemPrompt.includes('Jerry')) {
                        console.log('‚úÖ Using Jerry config from global config');
                        config.systemPrompt = globalConfig.systemPrompt;
                    } else if (systemPrompt.includes('Tom')) {
                        console.log('‚úÖ Using Tom config from global config');
                        config.systemPrompt = globalConfig.systemPrompt;
                    } else {
                        console.log('‚úÖ Using valid config from global config');
                        config.systemPrompt = globalConfig.systemPrompt;
                    }
                }
                if (globalConfig.maxTokens) {
                    config.apiParams = config.apiParams || {};
                    config.apiParams.max_tokens = globalConfig.maxTokens;
                }
                if (globalConfig.temperature !== undefined) {
                    config.apiParams = config.apiParams || {};
                    config.apiParams.temperature = globalConfig.temperature;
                }
                
                // Á°Æ‰øùuiÈÖçÁΩÆ‰∏çË¢´Ë¶ÜÁõñ
                if (!config.ui) {
                    config.ui = window.AI1_CONFIG?.ui || {};
                }
                
                console.log('‚úÖ AI1 config updated with TRUE GLOBAL settings:', config);
                console.log('üïê Global config version:', window.GLOBAL_CONFIG_VERSION);
            } else {
                // PRIORITY 2: Fallback to localStorage global config
                const globalConfigStr = localStorage.getItem('global_ai1_config');
                console.log('üåê Checking for localStorage global_ai1_config:', globalConfigStr);
                
                if (globalConfigStr) {
                    const parsed = JSON.parse(globalConfigStr);
                    console.log('üîß Loading localStorage GLOBAL AI1 config:', parsed);
                
                // Override specific settings
                if (parsed.model) config.model = parsed.model;
                if (parsed.systemPrompt) {
                    // Ê£ÄÊü•ÊòØÂê¶ÊòØLucyÁöÑÈÖçÁΩÆÔºåÂ¶ÇÊûúÊòØÂàô‰ΩøÁî®ÈªòËÆ§ÁöÑTomÈÖçÁΩÆ
                    const systemPrompt = parsed.systemPrompt;
                    if (systemPrompt.includes('Lucy') || systemPrompt.includes('magician') || systemPrompt.includes('Ruoyu Wen') || systemPrompt.includes('"role": "Lucy"')) {
                        console.log('‚ö†Ô∏è Detected Lucy/Ruoyu config in localStorage, using default Tom config instead');
                        config.systemPrompt = window.AI1_CONFIG?.systemPrompt || config.systemPrompt;
                    } else if (systemPrompt.includes('Jerry')) {
                        console.log('‚úÖ Using Jerry config from localStorage');
                        config.systemPrompt = parsed.systemPrompt;
                    } else if (systemPrompt.includes('Tom')) {
                        console.log('‚úÖ Using Tom config from localStorage');
                        config.systemPrompt = parsed.systemPrompt;
                    } else {
                        console.log('‚úÖ Using valid config from localStorage');
                        config.systemPrompt = parsed.systemPrompt;
                    }
                }
                if (parsed.maxTokens) {
                    config.apiParams = config.apiParams || {};
                    config.apiParams.max_tokens = parsed.maxTokens;
                }
                if (parsed.temperature !== undefined) {
                    config.apiParams = config.apiParams || {};
                    config.apiParams.temperature = parsed.temperature;
                }
                
                // Á°Æ‰øùuiÈÖçÁΩÆ‰∏çË¢´Ë¶ÜÁõñ
                if (!config.ui) {
                    config.ui = window.AI1_CONFIG?.ui || {};
                }
                
                    console.log('‚úÖ AI1 config updated with localStorage GLOBAL settings:', config);
                } else {
                    // PRIORITY 3: Fallback to legacy user-specific config
                    const customConfigStr = localStorage.getItem('ai1_custom_config');
                    console.log('üîç Checking localStorage for ai1_custom_config (legacy):', customConfigStr);
                    
                    if (customConfigStr) {
                        const parsed = JSON.parse(customConfigStr);
                        console.log('üîß Loading legacy custom AI1 config:', parsed);
                        
                        // Override specific settings
                        if (parsed.model) config.model = parsed.model;
                        if (parsed.systemPrompt) {
                            // Ê£ÄÊü•ÊòØÂê¶ÊòØLucyÁöÑÈÖçÁΩÆÔºåÂ¶ÇÊûúÊòØÂàô‰ΩøÁî®ÈªòËÆ§ÁöÑTomÈÖçÁΩÆ
                            const systemPrompt = parsed.systemPrompt;
                            if (systemPrompt.includes('Lucy') || systemPrompt.includes('magician') || systemPrompt.includes('Ruoyu Wen') || systemPrompt.includes('"role": "Lucy"')) {
                                console.log('‚ö†Ô∏è Detected Lucy/Ruoyu config in legacy config, using default Tom config instead');
                                config.systemPrompt = window.AI1_CONFIG?.systemPrompt || config.systemPrompt;
                            } else if (systemPrompt.includes('Jerry')) {
                                console.log('‚úÖ Using Jerry config from legacy config');
                                config.systemPrompt = parsed.systemPrompt;
                            } else if (systemPrompt.includes('Tom')) {
                                console.log('‚úÖ Using Tom config from legacy config');
                                config.systemPrompt = parsed.systemPrompt;
                            } else {
                                console.log('‚úÖ Using valid config from legacy config');
                                config.systemPrompt = parsed.systemPrompt;
                            }
                        }
                        if (parsed.maxTokens) {
                            config.apiParams = config.apiParams || {};
                            config.apiParams.max_tokens = parsed.maxTokens;
                        }
                        if (parsed.temperature !== undefined) {
                            config.apiParams = config.apiParams || {};
                            config.apiParams.temperature = parsed.temperature;
                        }
                        
                        // Á°Æ‰øùuiÈÖçÁΩÆ‰∏çË¢´Ë¶ÜÁõñ
                        if (!config.ui) {
                            config.ui = window.AI1_CONFIG?.ui || {};
                        }
                        
                        console.log('‚úÖ AI1 config updated with legacy custom settings:', config);
                    } else {
                        console.log('‚ÑπÔ∏è No custom AI1 config found, using defaults');
                        // Á°Æ‰øùuiÈÖçÁΩÆÂ≠òÂú®
                        if (!config.ui) {
                            config.ui = window.AI1_CONFIG?.ui || {};
                        }
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå Error loading custom AI1 config:', error);
            // Á°Æ‰øùuiÈÖçÁΩÆÂ≠òÂú®
            if (!config.ui) {
                config.ui = window.AI1_CONFIG?.ui || {};
            }
        }
        
        // Always use transit API endpoint regardless of other config
        config.apiEndpoint = 'https://xuedingmao.online/v1/chat/completions';
        
        return config;
    }

    // Add method to refresh config
    refreshConfig() {
        console.log('üîÑ Refreshing AI1 configuration...');
        this.config = this.loadConfig();
        this.addMessage('üîÑ Configuration refreshed! New settings will apply to future conversations.', 'assistant');
    }

    initializeElements() {
        this.chatContainer = document.getElementById('chat-container');
        this.chatInput = document.getElementById('chat-input');
        this.sendBtn = document.getElementById('send-btn');
        this.typingIndicator = document.getElementById('typing-indicator');
        this.typingText = document.getElementById('typing-text');
        this.apiKeyInput = document.getElementById('api-key');

    }

    bindEvents() {
        this.sendBtn.addEventListener('click', () => this.sendMessage());
        this.chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        this.apiKeyInput.addEventListener('input', (e) => {
            this.apiKey = e.target.value;
            localStorage.setItem('transit_api_key_v2', this.apiKey);
        });

        // Auto-resize textarea
        this.chatInput.addEventListener('input', () => {
            this.chatInput.style.height = 'auto';
            this.chatInput.style.height = this.chatInput.scrollHeight + 'px';
        });


    }

    loadApiKey() {
        const savedKey = localStorage.getItem('transit_api_key_v2');
        if (savedKey) {
            this.apiKey = savedKey;
            this.apiKeyInput.value = savedKey;
        }
    }

    initializeUI() {
        // ËÆæÁΩÆUIÊñáÊú¨‰ªéÈÖçÁΩÆÊñá‰ª∂
        if (this.config.ui) {
            this.apiKeyInput.placeholder = this.config.ui.apiKeyPlaceholder || 'sk-proj-...';
            this.sendBtn.innerHTML = `<i class="fas fa-paper-plane"></i> ${this.config.ui.sendButtonText || 'Send'}`;
            this.typingText.textContent = this.config.ui.typingText || 'AI is thinking...';
            
            // Ê∑ªÂä†Ê¨¢ËøéÊ∂àÊÅØÔºàÁ°Æ‰øùÂú®Ê∏ÖÈô§‰ºöËØùÊï∞ÊçÆÂêéÊòæÁ§∫Ôºâ
            if (this.config.ui.welcomeMessage && this.chatContainer.children.length === 0) {
                this.addMessage(this.config.ui.welcomeMessage, 'assistant');
            }
        }
    }

    async sendMessage() {
        const message = this.chatInput.value.trim();
        if (!message) return;



        if (!this.apiKey) {
            this.showError('Please enter your API Key first!');
            return;
        }

        if (this.isTyping) return;

        // Add user message to chat
        this.addMessage(message, 'user');
        this.chatInput.value = '';
        this.chatInput.style.height = 'auto';

        // Show typing indicator
        this.showTyping(true);

        try {
            // Call Transit API
            const response = await this.callOpenAI(message);
            
            // Handle different response classes
            const responseClass = response.class || 'none';
            const content = response.content || response;
            
            // Display the content as conversation
            this.addMessage(content, 'assistant');
            
            // Handle different response states
            if (responseClass === 'fail') {
                this.handleFailState();
                return;
            } else if (responseClass === 'success') {
                this.handleSuccessState();
                return;
            } else if (responseClass === 'none') {
                // Continue normal conversation
            }
        } catch (error) {
            console.error('AI Chat Error:', error);
            this.showError('Êä±Ê≠âÔºåTomÊöÇÊó∂Êó†Ê≥ïÂõûÂ∫î„ÄÇËØ∑Ê£ÄÊü•API KeyÊàñÁ®çÂêéÈáçËØï„ÄÇ');
        } finally {
            this.showTyping(false);
        }
    }

    async callOpenAI(userMessage) {
        // Add current message to conversation history
        this.messages.push({ role: 'user', content: userMessage });

        // ‰ªéÈÖçÁΩÆÊñá‰ª∂Ëé∑ÂèñËÆæÁΩÆ
        const model = this.config.model || 'gpt-4o';
        const systemPrompt = this.config.systemPrompt || '‰Ω†ÊòØ‰∏Ä‰∏™ÂèãÂ•ΩÁöÑÂä©Êâã„ÄÇËØ∑Áî®‰∏≠ÊñáÂõûÁ≠îÈóÆÈ¢òÔºå‰øùÊåÅÁ§ºË≤åÂíåÊúâÂ∏ÆÂä©ÁöÑÊÄÅÂ∫¶„ÄÇ';
        const apiParams = this.config.apiParams || {};
        
        // Â∞ùËØïÂ§ö‰∏™APIÁ´ØÁÇπ - Ê†πÊçÆËñõÂÆöÁå´APIÂÆòÊñπÊñáÊ°£
        const apiEndpoints = [
            'https://xuedingmao.online/v1/chat/completions',
            'https://xuedingmao.online/v1',
            'https://xuedingmao.online',
            'https://api.xuedingmao.com/v1/chat/completions' // Â§áÁî®Á´ØÁÇπ
        ];
        
        let lastError = null;
        
        for (const apiEndpoint of apiEndpoints) {
            try {
                console.log(`üîó Trying API endpoint: ${apiEndpoint}`);
                
                const response = await fetch(apiEndpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.apiKey}`
                    },
                    body: JSON.stringify({
                        model: model,
                        messages: [
                            {
                                role: 'system',
                                content: systemPrompt
                            },
                            ...this.messages
                        ],
                        max_tokens: apiParams.max_tokens || 1500,
                        temperature: apiParams.temperature || 0.7,
                        top_p: apiParams.top_p || 0.9,
                        frequency_penalty: apiParams.frequency_penalty || 0.0,
                        presence_penalty: apiParams.presence_penalty || 0.0,
                        stream: false,
                        response_format: { type: "json_object" }
                    })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(`API Error: ${error.error?.message || 'Unknown error'}`);
                }

                const data = await response.json();
                const assistantMessage = data.choices[0].message.content;
                
                // Parse JSON response
                let parsedResponse;
                try {
                    parsedResponse = JSON.parse(assistantMessage);
                } catch (error) {
                    console.error('Failed to parse JSON response:', error);
                    // Fallback to plain text if JSON parsing fails
                    parsedResponse = {
                        content: assistantMessage,
                        class: "none"
                    };
                }
                
                // Add assistant response to conversation history
                this.messages.push({ role: 'assistant', content: parsedResponse.content || assistantMessage });

                // Keep conversation history reasonable (‰ªéÈÖçÁΩÆÊñá‰ª∂Ëé∑ÂèñÂéÜÂè≤ÈïøÂ∫¶ÈôêÂà∂)
                const maxHistory = this.config.maxHistoryLength || 20;
                if (this.messages.length > maxHistory) {
                    this.messages = this.messages.slice(-maxHistory);
                }

                console.log(`‚úÖ Successfully used API endpoint: ${apiEndpoint}`);
                return parsedResponse;
                
            } catch (error) {
                console.warn(`‚ùå Failed to use API endpoint ${apiEndpoint}:`, error.message);
                lastError = error;
                continue;
            }
        }
        
        // Â¶ÇÊûúÊâÄÊúâÁ´ØÁÇπÈÉΩÂ§±Ë¥•‰∫Ü
        console.error('‚ùå All API endpoints failed');
        
        // Ê£ÄÊü•ÊòØÂê¶ÊòØÁΩëÁªúËøûÊé•ÈóÆÈ¢ò
        if (lastError && (lastError.message.includes('Failed to fetch') || lastError.message.includes('ERR_NAME_NOT_RESOLVED'))) {
            throw new Error('ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºöÊó†Ê≥ïËøûÊé•Âà∞ËñõÂÆöÁå´APIÊúçÂä°Âô®„ÄÇËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÊàñÁ®çÂêéÈáçËØï„ÄÇ\n\nÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°àÔºö\n1. Ê£ÄÊü•ÁΩëÁªúËøûÊé•\n2. Á°ÆËÆ§APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ\n3. Á®çÂêéÈáçËØï');
        }
        
        // Ê£ÄÊü•ÊòØÂê¶ÊòØAPIÂØÜÈí•ÈóÆÈ¢ò
        if (lastError && (lastError.message.includes('401') || lastError.message.includes('Unauthorized'))) {
            throw new Error('APIÂØÜÈí•Êó†ÊïàÔºöËØ∑Ê£ÄÊü•ÊÇ®ÁöÑËñõÂÆöÁå´APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ„ÄÇ');
        }
        
        // ÂÖ∂‰ªñÈîôËØØ
        throw new Error(`APIË∞ÉÁî®Â§±Ë¥•Ôºö${lastError?.message || 'Êú™Áü•ÈîôËØØ'}`);
    }

    addMessage(message, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;
        
        // Create avatar
        const avatarDiv = document.createElement('div');
        avatarDiv.className = 'message-avatar';
        
        // Create content wrapper
        const contentWrapper = document.createElement('div');
        contentWrapper.className = 'message-wrapper';
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        
        // ‰ªéÈÖçÁΩÆÊñá‰ª∂Ëé∑ÂèñÊ†áÁ≠æÊñáÊú¨
        const userLabel = this.config.ui?.userLabel || 'You';
        const assistantLabel = this.config.ui?.assistantLabel || 'Tom';
        
        if (sender === 'user') {
            // User avatar - neutral
            avatarDiv.innerHTML = `<div class="avatar user-avatar">üë§</div>`;
            contentDiv.innerHTML = `<strong>${userLabel}:</strong> ${this.escapeHtml(message)}`;
        } else {
            // AI Chat 1 - Male avatar
            avatarDiv.innerHTML = `<div class="avatar ai-avatar male-avatar">üë®‚Äçüíª</div>`;
            contentDiv.innerHTML = `<strong>${assistantLabel}:</strong> ${this.formatMessage(message)}`;
        }
        
        contentWrapper.appendChild(contentDiv);
        messageDiv.appendChild(avatarDiv);
        messageDiv.appendChild(contentWrapper);
        this.chatContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }

    showError(errorMessage) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message assistant';
        messageDiv.style.borderLeftColor = '#ff6b6b';
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        
        // ‰ΩøÁî®ÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑÈîôËØØÊ∂àÊÅØÊàñÈªòËÆ§Ê∂àÊÅØ
        const finalErrorMessage = errorMessage || this.config.ui?.errorMessage || 'Sorry, the AI assistant is temporarily unavailable. Please check your API Key or try again later.';
        contentDiv.innerHTML = `<strong>‚ùå Error:</strong> ${finalErrorMessage}`;
        
        messageDiv.appendChild(contentDiv);
        this.chatContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }

    showTyping(show) {
        this.isTyping = show;
        this.sendBtn.disabled = show;
        this.typingIndicator.style.display = show ? 'flex' : 'none';
        
        if (show) {
            this.scrollToBottom();
        }
    }

    scrollToBottom() {
        setTimeout(() => {
            this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
        }, 100);
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    formatMessage(message) {
        // Basic markdown-like formatting
        return this.escapeHtml(message)
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/`(.*?)`/g, '<code style="background: rgba(0,0,0,0.3); padding: 2px 4px; border-radius: 3px;">$1</code>')
            .replace(/\n/g, '<br>');
    }



    handleFailState() {
        console.log('üíÄ Game Over - Fail state triggered');
        
        // Display game over message
        this.addMessage('üéÆ GAME OVER', 'assistant');
        
        // Disable chat functionality
        this.chatInput.disabled = true;
        this.sendBtn.disabled = true;
        this.chatInput.placeholder = 'Game Over - Chat disabled';
        this.sendBtn.innerHTML = '<i class="fas fa-ban"></i> Disabled';
        this.sendBtn.style.opacity = '0.5';
        this.sendBtn.style.cursor = 'not-allowed';
        

        
        // Create and show completion button for fail state
        this.showCompletionButton('fail');
        
        this.scrollToBottom();
    }

    handleSuccessState() {
        console.log('üéâ Game Success - Success state triggered');
        
        // Display success message
        this.addMessage('üéâ Congratulations! Game completed successfully!', 'assistant');
        
        // Disable chat functionality
        this.chatInput.disabled = true;
        this.sendBtn.disabled = true;
        this.chatInput.placeholder = 'Task completed - Chat disabled';
        this.sendBtn.innerHTML = '<i class="fas fa-check"></i> Completed';
        this.sendBtn.style.opacity = '0.5';
        
        // Create and show completion button for success state
        this.showCompletionButton('success');
        
        this.scrollToBottom();
    }

    showCompletionButton(gameResult) {
        // Remove any existing completion button
        const existingButton = document.getElementById('completion-button');
        if (existingButton) {
            existingButton.remove();
        }

        // Create completion button
        const completionButton = document.createElement('button');
        completionButton.id = 'completion-button';
        completionButton.textContent = 'Complete';
        completionButton.className = 'submit-btn';
        completionButton.style.margin = '10px auto';
        completionButton.style.display = 'block';
        completionButton.style.background = gameResult === 'success' 
            ? 'linear-gradient(135deg, #28a745, #20c997)' 
            : 'linear-gradient(135deg, #dc3545, #c82333)';
        
        completionButton.onclick = () => {
            this.saveGameResult(gameResult);
            completionButton.disabled = true;
            completionButton.textContent = 'Completed ‚úì';
            completionButton.style.opacity = '0.5';
        };
        
        // Add button to the chat container
        const chatContainer = document.getElementById('chat-container');
        
        if (chatContainer && chatContainer.parentNode) {
            chatContainer.parentNode.appendChild(completionButton);
        }
    }

    saveGameResult(gameResult) {
        console.log(`üíæ Saving game result: ${gameResult}`);
        
        // Generate unique ID
        const resultId = this.generateUniqueId();
        
        // Collect chat history
        const chatHistory = this.messages.map(msg => ({
            role: msg.role,
            content: msg.content,
            timestamp: new Date().toISOString()
        }));
        
        console.log('üìù Chat history being saved:', chatHistory);
        console.log('üí¨ Total messages:', this.messages.length);
        
        const result = {
            id: resultId + 'ai1',
            gameResult: gameResult, // 'success' or 'fail'
            timestamp: new Date().toISOString(),
            task: 'ai_conversation_game',
            chatHistory: chatHistory,
            conversationRounds: 0,
            taskType: 'AI Chat 1 - Game Mode',
            finalState: gameResult === 'success' ? 'Game Won' : 'Game Over'
        };

        console.log('üìä Complete result object:', result);

        // Save to localStorage
        const existingResults = JSON.parse(localStorage.getItem('airesults') || '[]');
        existingResults.push(result);
        localStorage.setItem('airesults', JSON.stringify(existingResults));
        
        console.log('üíæ Saved to localStorage. All results:', existingResults);

        // Also save to central storage
        this.saveToCentralStorage(result);
        
        // Show completion message
        const statusMessage = gameResult === 'success' 
            ? 'üéâ Game completed successfully!' 
            : 'üíÄ Game over recorded!';
        this.addMessage(`‚úÖ ${statusMessage} Your result "${gameResult}" has been saved with ID: ${result.id}`, 'assistant');
        
        // Show link to results page
        setTimeout(() => {
            this.addMessage('üìä View all results at: <a href="airesult.html" target="_blank" style="color: var(--secondary-color);">Results Page</a>', 'assistant');
        }, 1000);
    }



    generateUniqueId() {
        // Generate 6-digit sequential ID
        const existingResults = JSON.parse(localStorage.getItem('airesults') || '[]');
        return String(existingResults.length + 1).padStart(6, '0');
    }

    // Ê∏ÖÈô§‰ºöËØùÊï∞ÊçÆÔºåÁ°Æ‰øùÊØèÊ¨°Âà∑Êñ∞ÈÉΩÊòØÂπ≤ÂáÄÁä∂ÊÄÅ
    clearSessionData() {
        console.log('üßπ Clearing AI1 session data for fresh start...');
        
        // Ê∏ÖÈô§ÂèØËÉΩÂ≠òÂú®ÁöÑ‰ºöËØùÁõ∏ÂÖ≥Êï∞ÊçÆ
        localStorage.removeItem('sessionSeed');
        localStorage.removeItem('ai1_chat_messages');
        localStorage.removeItem('ai1_chat_state');
        localStorage.removeItem('ai1_conversation_history');
        localStorage.removeItem('ai1_chat_context');
        
        // ÈáçÁΩÆÊ∂àÊÅØÊï∞ÁªÑ - ËøôÊòØÂÖ≥ÈîÆÔºÅ
        this.messages = [];
        
        // Ê∏ÖÈô§ËÅäÂ§©ÂÆπÂô®ÂÜÖÂÆπÔºå‰ΩÜ‰øùÁïôÊ¨¢ËøéÊ∂àÊÅØÁöÑ‰ΩçÁΩÆ
        if (this.chatContainer) {
            this.chatContainer.innerHTML = '';
        }
        
        // ÈáçÁΩÆËÅäÂ§©Áä∂ÊÄÅ
        this.isTyping = false;
        
        // Á°Æ‰øùËæìÂÖ•Ê°ÜÊòØÂêØÁî®Áä∂ÊÄÅ
        if (this.chatInput) {
            this.chatInput.disabled = false;
            this.chatInput.placeholder = 'Type your message...';
        }
        if (this.sendBtn) {
            this.sendBtn.disabled = false;
            this.sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Send';
        }
        
        console.log('‚úÖ AI1 session data cleared, ready for fresh conversation');
        console.log('üìù Messages array reset:', this.messages);
    }



    // Save result to central storage (same as AI Chat 1)
    async saveToCentralStorage(result) {
        try {
            // Add session info for tracking
            const sessionSeed = localStorage.getItem('sessionSeed');
            const enhancedResult = {
                ...result,
                sessionSeed: sessionSeed,
                userAgent: navigator.userAgent,
                timestamp: new Date().toISOString(),
                ipHash: await this.getSimpleFingerprint() // Simple fingerprint for tracking
            };

            console.log('üåê Attempting to save to central storage (AI1):', enhancedResult);
            
            // Use the same central storage as AI Chat 1
            const centralResults = JSON.parse(localStorage.getItem('centralResults') || '[]');
            centralResults.push(enhancedResult);
            localStorage.setItem('centralResults', JSON.stringify(centralResults));
            
            console.log('üì° Saved to central storage simulation (AI1):', enhancedResult);
            
        } catch (error) {
            console.error('‚ùå Failed to save to central storage (AI1):', error);
        }
    }

    // Generate simple fingerprint for user tracking (same as AI Chat 1)
    async getSimpleFingerprint() {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        ctx.textBaseline = 'top';
        ctx.font = '14px Arial';
        ctx.fillText('Fingerprint test', 2, 2);
        const fingerprint = canvas.toDataURL();
        
        // Simple hash
        let hash = 0;
        for (let i = 0; i < fingerprint.length; i++) {
            const char = fingerprint.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        return Math.abs(hash).toString(16);
    }
}

// Initialize AI Chat when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.ai1ChatInstance = new AI1Chat();
});